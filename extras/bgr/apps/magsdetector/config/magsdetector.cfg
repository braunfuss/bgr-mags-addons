# Specifies the filter order
filter.order = 4

# Specifies the frequency of the general hi-pass filter. If this parameter is
# equal to 0 the hi-pass filter is not used.
filter.loFreq = 10

# Specifies the frequency of the general lo-pass filter. If this parameter
# is equal to 0 the lo-pass filter is not used.
filter.hiFreq = 40

# Enables a bandstop filter at 50Hz and 100Hz.
filter.bandStop = false

# Compute envelope to be used for fitting the master events.
envelope.enable = true

# Defines the target sampling frequency of the envelope (0 = no resampling).
envelope.samplingFrequency = 0

# Enables averaging of neighbor samples when downsampling. The width of the
# kernel is the ratio of SR/samplingFrequency.
envelope.resampleAverage = false

# freq (Hz) of lowpass for smoothing the envelope (0 = no filter).
envelope.hiFreq = 20

# Defines if the envelope function is done in the frequency domain with
# hilbert transformation (true) or recursive (false)
envelope.acausal = false

# Detectors minimum channel fit to be used for matching with a master event.
detector.channelThreshold = -100

# Detector threshold to search for maximum to declare an event.
detector.threshold = 0.55

# Length of time window (in s) to search for maximum after trigger.
detector.window = 2

# Minimum ratio in percent of matches stations vs. stations in master event
detector.minimumStationRatio = 0

# Minimum ratio in percent of matches overall channels vs. channels in
# master event
detector.minimumChannelRatio = 0

# Sets the minimum processing time window length in seconds to minimize
# processing steps on each record arrival. 0 processes the data as fast
# as possible.
detector.minimumProcessingWindow = 0

# If event groups are used and an event is declared which still needs to wait for
# all other events in the group to be processed this timeout is used to publish
# the best event of this group after a certain amount of time regardless of
# unprocessed events in the group.
# A negative value disables this feature and a queued event never times out.
detector.publicationTimeout = 10


# The maximum frequency of processing steps per time window.
# If the data sampling frequency is much higher this parameter
# reduces processing time by increasing the time steps. A value
# of zero derives the time steps from the datas or envelopes sampling
# frequency.
processing.maximumStepFrequency = 0

# Flag for normalization: trace, total
processing.normalization = total

# Defines whether the waveform processing (filtering, envelope, ...) is
# done in the frequency domain (true) or recursive in the time domain (false).
# Processing in time domain is much faster but less accurate.
processing.acausal = false

# Defines the data buffer size in seconds (integer values). The default is
# 10 minutes (600 seconds). This parameter is important when testing with
# record volumes where records are not ordered by time.
processing.bufferSize = 600

# Defines the processing interval in seconds (integer values). If records
# are received it will process the data every n seconds not more often.
# 0 disables the interval and starts processing whenever a new record is
# received and enough data are available.
processing.interval = 0

# Defines the maximum data latency in seconds tolerated by the detector.
# If data latency is higher than this value processing is triggered without
# this particular channel.
processing.maximumLatency = 10

# Enables usage of the logarithm of the final trace (either waveforms or
# envelope).
processing.logarithm = false

# Defines if the fit function for an event and each channel is dumped to
# output.waveforms.path. The fit function starts at the trigger and
# ends after trigger+detector.window.
# The naming convention is date-event.fit and data-[channel.id].fit.
# The first column contains the timestamp and the second column the fit.
# The channel fit functions include additionally the fit contribution to
# the event in the 3rd column and the weight with respect to the overall fit.
output.fit.enable = false

# Defines if each processed event is dumped to MiniSEED for e.g.
# debugging reasons. Also all data that are processed after the trigger
# is reached and withing the processing time window (detector.window) is
# dumped.
output.waveforms.enable = false

# Defines if each time step after a trigger within detector.window is saved
# as multiplexed MiniSEED file which contains all channels.
output.waveforms.mseed = false

output.waveforms.path = @LOGDIR@/magsdetector/waveforms

# Define output file for matched events. Each match creates a new line
# with format yyyy mm dd HH MM SS.FFF Lat Long Mag city CF usedPhases (cha:fit, ...)
#output.events.file = ""

# Defines the data channels to be used as list of stream codes. Using
# full channel codes (3 characters) will use only this channel, defining
# 2 characters will make use of all 3 components, e.g.
# AB.STA01..HHZ vs. AB.STA01..HH
#channels = AB.STA01..BH, AB.STA02..SH, AB.STA03..HHZ

# Defines the master events. It is a list of event identifiers.
#events = name1, name2

# Defines each event
# Event time in UTC
#event.name1.time      = "2013-01-01 12:00:00.000"
# Define location name
#event.name1.place     = "City1"
# Defines a group name. Only one event of a group can occur at one time. If
# the group is empty the event is independent and forms a group containing only
# this event.
#event.name1.group     = "Area1"
# Defines the begin of the noise window if envelope is enabled. This value
# is relativ to time. If not given then noiseBegin is set to signalBegin.
# The minimum mean of both defined noise windows is used finally.
#event.noiseBegin      = 0
# Defines the end of the noise window if envelope is enabled. This value
# is relativ to time. If not given then noiseEnd is set to signalBegin.
# The minimum mean of both defined noise windows is used finally.
#event.noiseEnd        = 0
# Defines the begin of the second noise window if envelope is enabled. This value
# is relativ to time. If not given then noise2Begin is set to signalBegin.
# The minimum mean of both defined noise windows is used finally.
# This parameter is optional and set to noiseBegin if not given.
#event.noise2Begin     = 0
# Defines the end of the second noise window if envelope is enabled. This value
# is relativ to time. If not given then noiseEnd is set to signalBegin.
# The minimum mean of both defined noise windows is used finally.
# This parameter is optional and set to noiseEnd if not given.
#event.noise2End       = 0
# Defines the begin of the signal window used for cross-correlation.
#event.signalBegin     = 0
# Defines the end of the signal window used for cross-correlation.
#event.signalEnd       = 6
# Event magnitude
#event.name1.magnitude = 2.0
# Event latitude
#event.name1.latitude  = 52.400
# Event longitude
#event.name1.longitude = 13.010
# Event depth
#event.name1.depth     = 4
# Event data archive
#event.name1.data      = sds:///path/to/sds
# Flag to indicate if the master event data should
# be processed or not (e.g. when preprocessed data are
# stored)
#event.name1.processData = true
